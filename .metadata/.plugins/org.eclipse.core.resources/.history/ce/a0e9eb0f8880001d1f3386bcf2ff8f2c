package Project.winery.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import Project.winery.model.Wine;
import Project.winery.repository.WineRepository;
import Project.winery.service.WineService;

@Service
public class JpaWineService implements WineService{
	
	@Autowired
	private WineRepository wineRepository;

	@Override
	public Wine findOne(Long id) {
		return wineRepository.findOneById(id);
	}

	@Override
	public List<Wine> findAll() {
		return wineRepository.findAll();
	}

	@Override
	public Page<Wine> findAll(Integer pageNo) {
		return wineRepository.findAll(PageRequest.of(pageNo, 5));
	}

	@Override
	public Wine save(Wine wine) {
		wine.setAvailableBottles(0);
		return wineRepository.save(wine);
	}

	@Override
	public Wine update(Wine wine) {
		return wineRepository.save(wine);
	}

	@Override
	public Wine delete(Long id) {
		Wine wine = wineRepository.findOneById(id);
		if(wine != null) {
			wine.getWinery().getWines().remove(wine);
			wine.getType().getWines().remove(wine);
			wineRepository.delete(wine);
			return wine;
		}
		return null;
	}

	@Override
	public List<Wine> findByWineryId(Long wineryId) {
		return wineRepository.findByWineryId(wineryId);
	}

	@Override
	public List<Wine> findByTypeId(Long typeId) {
		return wineRepository.findByTypeId(typeId);
	}

	@Override
	public Page<Wine> find(String name, Long wineryId, Integer pageNo) {
		if(name == null) {
			name = "";
		}
		
		if(wineryId == null) {
			return wineRepository.findByNameIgnoreCaseContains(name, PageRequest.of(pageNo, 5));
		}
		return wineRepository.findByNameIgnoreCaseContainsAndWineryId(name, wineryId, PageRequest.of(pageNo, 5));
	}

	@Override
	public Wine order(Long id, Integer quantity) {
		Wine wine = wineRepository.findOneById(id);
		Integer quantityOfBottles = wine.getAvailableBottles() + quantity;
		wine.setAvailableBottles(quantityOfBottles);
		return wineRepository.save(wine);
	}

	@Override
	public Wine purchase(Integer quantity, Long id) {
		Wine wine = wineRepository.findOneById(id);
		Integer quantityOfBottles = wine.getAvailableBottles() - quantity;
		if(wine.getAvailableBottles() > quantity) {
			wine.setAvailableBottles(quantityOfBottles);
		}
		return wineRepository.save(wine);
	}

}
